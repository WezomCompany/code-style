{
	"extends": ["@wezom/eslint-config"],
	"parser": "@typescript-eslint/parser",
	"plugins": ["@typescript-eslint"],
	"rules": {
		"no-unused-vars": "off",

		"@typescript-eslint/explicit-function-return-type": "error",
		"@typescript-eslint/explicit-module-boundary-types": "error",
		"@typescript-eslint/naming-convention": [
			"error",
			{
				"selector": "property",
				"modifiers": ["private"],
				"format": ["camelCase"],
				"leadingUnderscore": "require"
			},
			{
				"selector": "parameterProperty",
				"format": ["camelCase"]
			},
			{
				"selector": "parameterProperty",
				"modifiers": ["private"],
				"format": ["camelCase"],
				"leadingUnderscore": "require"
			},
			{
				"selector": "method",
				"format": ["camelCase"]
			},
			{
				"selector": "method",
				"modifiers": ["private"],
				"format": ["camelCase"],
				"leadingUnderscore": "require"
			},
			{
				"selector": "accessor",
				"format": ["camelCase"]
			},
			{
				"selector": "accessor",
				"modifiers": ["private"],
				"format": ["camelCase"],
				"leadingUnderscore": "require"
			},
			{
				"selector": "enumMember",
				"format": ["PascalCase"]
			},
			{
				"selector": "variable",
				"format": ["camelCase", "UPPER_CASE", "PascalCase"],
				"leadingUnderscore": "allow"
			},
			{
				"selector": "function",
				"format": ["camelCase", "PascalCase"],
				"leadingUnderscore": "allow"
			},
			{
				"selector": "parameter",
				"format": ["camelCase", "PascalCase"],
				"leadingUnderscore": "allow"
			},
			{
				"selector": "class",
				"format": ["PascalCase"]
			},
			{
				"selector": "class",
				"modifiers": ["abstract"],
				"format": ["PascalCase"],
				"prefix": ["Abstract"]
			},
			{
				"selector": "interface",
				"format": ["PascalCase"]
			},
			{
				"selector": "typeAlias",
				"format": ["PascalCase"]
			},
			{
				"selector": "typeParameter",
				"format": ["PascalCase"]
			},
			{
				"selector": "enum",
				"format": ["PascalCase"],
				"custom": {
					"regex": "[a-z]List$",
					"match": true
				}
			}
		],
		"@typescript-eslint/no-empty-interface": "off",
		"@typescript-eslint/no-explicit-any": "off",
		"@typescript-eslint/no-var-requires": "off",
		"@typescript-eslint/no-unused-vars": [
			"error",
			{
				"vars": "all",
				"args": "none",
				"caughtErrors": "all"
			}
		]
	}
}
